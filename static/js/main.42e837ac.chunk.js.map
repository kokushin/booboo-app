{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","audio","setAudio","isCompleted","setIsCompleted","videoEl","useRef","useEffect","a","async","faceapi","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceExpressionNet","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","play","Audio","className","src","width","alt","onClick","window","location","reload","ref","onPlay","options","loop","setInterval","withFaceLandmarks","withFaceExpressions","clearInterval","style","display","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"+UA+DeA,MA3Df,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACNC,EADM,KACCC,EADD,OAEyBF,oBAAS,GAFlC,mBAENG,EAFM,KAEOC,EAFP,KAGPC,EAAUC,iBAAO,MAuCvB,OAlBAC,qBAAU,WACP,EAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACOE,IAAaC,iBAAiBC,YAAY,kDADjD,yBAAAJ,EAAA,MAEOE,IAAaG,kBAAkBD,YAAY,kDAFlD,yBAAAJ,EAAA,MAGOE,IAAaI,kBAAkBF,YAAY,kDAHlD,OAKCG,UACGC,aACAC,aAAa,CAAEC,MAAO,KACtBC,MAAK,SAAAC,GACJf,EAAQgB,QAAQC,UAAYF,EAC5Bf,EAAQgB,QAAQE,OAEhBrB,EAAS,IAAIsB,MAAM,8DAZxB,uCAeA,IAGD,yBAAKC,UAAU,OACb,0CACA,iJACCtB,GACC,oCACE,2BACE,yBAAKuB,IAAI,yDAAyDC,MAAM,MAAMC,IAAI,MAEpF,4BAAQC,QAAS,kBAAMC,OAAOC,SAASC,WAAvC,UAGJ,2BAAOC,IAAK5B,EAAS6B,OAjDV,WACb,IAAMC,EAAU,IAAIzB,IACd0B,EAAOC,aAAY,oBAAA7B,EAAAC,OAAA,kEAAAD,EAAA,MACFE,IAEjBL,EAAQgB,QACRc,GAEDG,oBACAC,uBAPoB,gBAUrBtC,EAAMsB,OACNnB,GAAe,GACfoC,cAAcJ,IAZO,uCActB,MAiCoCK,MAAO,CAAEC,QAAS,YC9CzCC,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBlC,WACrBA,UAAUmC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.42e837ac.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport * as faceapi from 'face-api.js';\nimport './App.css';\n\nfunction App() {\n  const [audio, setAudio] = useState(null);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const videoEl = useRef(null);\n\n  const onPlay = () => {\n    const options = new faceapi.TinyFaceDetectorOptions();\n    const loop = setInterval(async () => {\n      const result = await faceapi\n        .detectSingleFace(\n          videoEl.current,\n          options,\n        )\n        .withFaceLandmarks()\n        .withFaceExpressions();\n\n      if (result) {\n        audio.play();\n        setIsCompleted(true);\n        clearInterval(loop);\n      }\n    }, 500);\n  };\n\n  useEffect(() => {\n    (async () => {\n      await faceapi.nets.tinyFaceDetector.loadFromUri('https://kokushin.github.io/booboo-app/weights');\n      await faceapi.nets.faceLandmark68Net.loadFromUri('https://kokushin.github.io/booboo-app/weights');\n      await faceapi.nets.faceExpressionNet.loadFromUri('https://kokushin.github.io/booboo-app/weights');\n\n      navigator\n        .mediaDevices\n        .getUserMedia({ video: {} })\n        .then(stream => {\n          videoEl.current.srcObject = stream;\n          videoEl.current.play();\n\n          setAudio(new Audio('https://kokushin.github.io/booboo-app/assets/audio.mp3'));\n        });\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>booboo-app</h1>\n      <p>カメラに写った顔を認識すると音が出ます</p>\n      {isCompleted && (\n        <>\n          <p>\n            <img src=\"https://kokushin.github.io/booboo-app/assets/image.png\" width=\"320\" alt=\"\" />\n          </p>\n          <button onClick={() => window.location.reload()}>Retry</button>\n        </>\n      )}\n      <video ref={videoEl} onPlay={onPlay} style={{ display: \"none\" }} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}